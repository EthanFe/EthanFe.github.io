{"version":3,"sources":["utils/hooks.js","react-piano/MidiNumbers.js","chordLogic/notes.js","chordLogic/chords.js","chordLogic/keySignatures.js","components/TransitionWrapper.js","react-piano/Key.js","react-piano/Keyboard.js","react-piano/ControlledPiano.js","react-piano/Piano.js","components/PianoGraphic.js","components/ProgressScreen.js","components/RoundedButton.js","progression/User.js","components/LearningIntervalsScreen.js","sound.js","components/ListeningPracticeScreen.js","readingData/readingData.js","components/SingingPracticeScreen/useAudioInput.js","components/TheoryScreen/logic.js","components/TheoryScreen/TheoryScreen.js","components/App.js","serviceWorker.js","index.js"],"names":["usePrevious","value","ref","useRef","useEffect","current","useIncrementer","initialValue","limit","intervalPeriod","startCondition","useState","setValue","currentValue","interval","setInterval","clearInterval","useDelay","delay","ready","setReady","setTimeout","useSequence","delays","counter","setCounter","length","map","_","index","useAwait","promise","a","useReusableDelay","restartedAt","setRestartedAt","timeout","cancel","clearTimeout","restart","Date","now","useStabilizedValue","rawValue","stabilizationPeriod","stabilizedValue","setStabilizedValue","stabilized","valueChanged","SORTED_PITCHES","ACCIDENTAL_PITCHES","PITCH_INDEXES","C","Db","D","Eb","E","F","Gb","G","Ab","A","Bb","B","NOTE_REGEX","midiNumberAttributesCache","range","MAX_MIDI_NUMBER","reduce","cache","midiNumber","pitchIndex","octave","Math","floor","pitchName","note","isAccidental","includes","buildMidiNumberAttributes","getAttributes","attrs","Error","NATURAL_MIDI_NUMBERS","filter","fromNote","match","exec","toLowerCase","letter","accidental","toUpperCase","parseInt","MIN_MIDI_NUMBER","noteNames","noteOrder","noteEquivalents","chordTypes","indexOfNote","indexOf","noteSemitonesAhead","newIndex","parseNoteLocations","notes","notePosition","setNotePosition","MidiNumbers","chordNotes","chordHasLowerNotesAhead","slice","some","otherNote","noteIsLower","comparisonNote","Major","Minor","Diminished","intervalLetters","Chord","root","type","isSeventh","intervalLetterInKey","keySignature","intervalInKey","push","this","name","keyCount","chords","forEach","chordTypesByInterval","cumulativeSemitoneOffsetsByInterval","chordsInKey","chordType","find","chord","KeySignature","keyTypes","keySignatures","key","circleOfFifths","count","backwards","keys","i","orderOfKeysWithSharps","orderOfKeysWithFlats","accidentals","TransitionWrapper","diffData","children","scale","transitionTime","transitionType","cachedRenderContent","setCachedRenderContent","currentData","setCurrentData","transitionState","setTransitionState","style","transform","className","animationDuration","ratioToPercentage","ratio","Key","props","naturalKeyWidth","accidentalWidthRatio","gliss","useTouchEvents","active","confirmedCorrect","incorrect","highlighted","velocity","keyPlayPulses","disabled","pitchPositions","onPlayNoteInput","onStopNoteInput","getAbsoluteKeyPosition","pulseColor","alreadyActiveVelocity","setAlreadyActiveVelocity","pulseStyle","setPulseStyle","boxShadow","transition","classNames","left","noteRange","first","getRelativeKeyPosition","width","onMouseDown","onMouseUp","onMouseEnter","onMouseLeave","onTouchStart","onTouchCancel","onTouchEnd","Keyboard","last","getMidiNumbers","number","getNaturalKeyCount","keyWidth","getNaturalKeyWidth","keyWidthToHeight","getWidth","height","getHeight","playedNoteTutorial","activeNotesTutorial","playedNote","activeNotes","isActive","undefined","isIncorrect","correctNotes","isConfirmedCorrect","keysAreCorrect","isHighlighted","highlightedNotes","intervalOfNote","displayInterval","intervalOfChord","intervalMarkersToShow","keyboardWidth","React","Component","defaultProps","renderNoteLabel","IntervalLabel","fontSize","ControlledPiano","state","isMouseDown","handleNoteChanges","prevActiveNotes","nextActiveNotes","notesStopped","difference","playNote","stopNote","getMidiNumberForKey","keyboardShortcuts","shortcut","sh","getKeyForMidiNumber","onKeyDown","event","ctrlKey","metaKey","shiftKey","onKeyUp","setState","keyboardShortcut","window","addEventListener","removeEventListener","prevProps","prevState","data-testid","Piano","handlePlayNoteInput","concat","handleStopNoteInput","otherProps","firstNote","lastNote","PianoGraphic","renderScale","setIntervalMarkersToShow","currentIntervalMarkersToShow","markerSpawningInterval","ProgressScreen","RoundedButton","onClick","enabled","styles","css","LearningIntervalsScreen","require","Soundfont","audioContext","AudioContext","loadInstrument","instrument","useAudioOutput","setInstrument","then","clefs","possibleOctaves","list","tone","clef","AMDF","voicingRequestHandlers","addDoubledNote","voicingRequest","processVoicingRequests","voicing","revoicedNotes","console","log","canHaveSeventh","printName","seventh","construct","withSeventh","shortName","chordTypesByName","constructChord","progressions","initial","resultantChord","getEquivalentsToChord","alternativeChords","alternativeRoots","alternativeChordTypes","alternativeRoot","alternativeType","alternativeIsSeventh","alternativeChord","chordsAreEquivalent","chord1","chord2","chord1Notes","chord2Notes","every","chordContainsNote","chordNote","getProgressionOptions","equivalents","startingChords","progressionOptions","startingChord","progression","possibleRoots","fullName","possibleChordTypes","TheoryContext","createContext","TheoryScreen","selectedChord","setSelectedChord","arpeggiatePlayback","setArpeggiatePlayback","audio","startingChordRef","Provider","checked","onChange","arpeggiate","ChordDisplay","forwardRef","label","useContext","totalPlaybackDuration","chordTitle","chordNoteLocations","audioReady","notePlays","random","time","duration","schedule","currentTime","ProgressionOptions","originalChord","ProgressionDisplay","options","resultantChordRef","property","start","end","endAnchor","position","offset","x","startAnchor","App","Boolean","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.bac9f638.chunk.js","sourcesContent":["import { useEffect, useRef, useState } from \"react\"\n\nexport const usePrevious = (value) => {\n  const ref = useRef();\n  useEffect(() => {\n    ref.current = value;\n  });\n  return ref.current;\n}\n\nexport const useIncrementer = (initialValue, limit, intervalPeriod, startCondition = true) => {\n  const [value, setValue] = useState(initialValue)\n  useEffect(() => {\n    if (startCondition) {\n      let currentValue = value\n      const interval = setInterval(() => {\n        currentValue++\n        setValue(currentValue)\n        if (currentValue >= limit) {\n          clearInterval(interval)\n        }\n      }, intervalPeriod)\n    }\n  }, [intervalPeriod, limit, startCondition])\n  return value\n}\n\nexport const useDelay = (delay, startCondition = true) => {\n  const [ready, setReady] = useState(false)\n  useEffect(() => {\n    if (startCondition) {\n      setTimeout(() => {\n        setReady(true)\n      }, delay)\n    }\n  }, [delay, startCondition])\n  return ready\n}\n\nexport const useSequence = (delays, startCondition = true) => {\n  const [counter, setCounter] = useState(0)\n  useEffect(() => {\n    if (startCondition && counter < delays.length) {\n      setTimeout(() => {\n        setCounter(counter + 1)\n      }, delays[counter])\n    }\n  }, [delays, startCondition, counter])\n  return delays.map((_, index) => counter > index)\n}\n\nexport const useAwait = (promise) => {\n  const [value, setValue] = useState(null)\n  useEffect(() => {\n    (async () => {\n      setValue(await promise)\n    })();\n  }, []);\n  return value\n}\n\nexport const useReusableDelay = (delay, startCondition = true) => {\n  const [ready, setReady] = useState(false)\n  const [restartedAt, setRestartedAt] = useState(null)\n  const timeout = useRef(null)\n\n  const cancel = () => {\n    if (timeout.current !== null) {\n      clearTimeout(timeout.current)\n    }\n  }\n\n  useEffect(() => {\n    if (timeout.current !== null) {\n      clearTimeout(timeout.current)\n    }\n    if (startCondition) {\n      timeout.current = setTimeout(() => {\n        setReady(true)\n        timeout.current = null\n      }, delay)\n    } else {\n      setReady(false)\n    }\n\n    return cancel\n  }, [delay, startCondition, restartedAt])\n\n  const restart = () => {\n    setReady(false)\n    setRestartedAt(Date.now())\n  }\n  return [ready, restart, cancel]\n}\n\nexport const useStabilizedValue = (rawValue, stabilizationPeriod) => {\n  const [stabilizedValue, setStabilizedValue] = useState(rawValue)\n  const [stabilized, valueChanged] = useReusableDelay(stabilizationPeriod)\n  useEffect(() => {\n    valueChanged()\n  }, [rawValue])\n  useEffect(() => {\n    if (stabilized) {\n      setStabilizedValue(rawValue)\n    }\n  }, [stabilized])\n\n  return stabilizedValue\n}","import range from 'just-range';\n\nconst SORTED_PITCHES = ['C', 'Db', 'D', 'Eb', 'E', 'F', 'Gb', 'G', 'Ab', 'A', 'Bb', 'B'];\nconst ACCIDENTAL_PITCHES = ['Db', 'Eb', 'Gb', 'Ab', 'Bb'];\nconst PITCH_INDEXES = {\n  C: 0,\n  'C#': 1,\n  Db: 1,\n  D: 2,\n  'D#': 3,\n  Eb: 3,\n  E: 4,\n  F: 5,\n  'F#': 6,\n  Gb: 6,\n  G: 7,\n  'G#': 8,\n  Ab: 8,\n  A: 9,\n  'A#': 10,\n  Bb: 10,\n  B: 11,\n};\nconst MIDI_NUMBER_C0 = 12;\nconst MIN_MIDI_NUMBER = MIDI_NUMBER_C0;\nconst MAX_MIDI_NUMBER = 127;\nconst NOTE_REGEX = /([a-g])([#b]?)(\\d+)/;\nconst NOTES_IN_OCTAVE = 12;\n\n// Converts string notes in scientific pitch notation to a MIDI number, or null.\n//\n// Example: \"c#0\" => 13, \"eb5\" => 75, \"abc\" => null\n//\n// References:\n// - http://www.flutopedia.com/octave_notation.htm\n// - https://github.com/danigb/tonal/blob/master/packages/note/index.js\nfunction fromNote(note) {\n  if (!note) {\n    throw Error('Invalid note argument');\n  }\n  const match = NOTE_REGEX.exec(note.toLowerCase());\n  if (!match) {\n    throw Error('Invalid note argument');\n  }\n  const [, letter, accidental, octave] = match;\n  const pitchName = `${letter.toUpperCase()}${accidental}`;\n  const pitchIndex = PITCH_INDEXES[pitchName];\n  if (pitchIndex == null) {\n    throw Error('Invalid note argument');\n  }\n  return MIDI_NUMBER_C0 + pitchIndex + NOTES_IN_OCTAVE * parseInt(octave, 10);\n}\n\n//\n// Build cache for getAttributes\n//\nfunction buildMidiNumberAttributes(midiNumber) {\n  const pitchIndex = (midiNumber - MIDI_NUMBER_C0) % NOTES_IN_OCTAVE;\n  const octave = Math.floor((midiNumber - MIDI_NUMBER_C0) / NOTES_IN_OCTAVE);\n  const pitchName = SORTED_PITCHES[pitchIndex];\n  return {\n    note: `${pitchName}${octave}`,\n    pitchName,\n    octave,\n    midiNumber,\n    isAccidental: ACCIDENTAL_PITCHES.includes(pitchName),\n  };\n}\n\nfunction buildMidiNumberAttributesCache() {\n  return range(MIN_MIDI_NUMBER, MAX_MIDI_NUMBER + 1).reduce((cache, midiNumber) => {\n    cache[midiNumber] = buildMidiNumberAttributes(midiNumber);\n    return cache;\n  }, {});\n}\n\nconst midiNumberAttributesCache = buildMidiNumberAttributesCache();\n\n// Returns an object containing various attributes for a given MIDI number.\n// Throws error for invalid midiNumbers.\nfunction getAttributes(midiNumber) {\n  const attrs = midiNumberAttributesCache[midiNumber];\n  if (!attrs) {\n    throw Error('Invalid MIDI number');\n  }\n  return attrs;\n}\n\n// Returns all MIDI numbers corresponding to natural notes, e.g. C and not C# or Bb.\nconst NATURAL_MIDI_NUMBERS = range(MIN_MIDI_NUMBER, MAX_MIDI_NUMBER + 1).filter(\n  (midiNumber) => !getAttributes(midiNumber).isAccidental,\n);\n\nexport default {\n  fromNote,\n  getAttributes,\n  MIN_MIDI_NUMBER,\n  MAX_MIDI_NUMBER,\n  NATURAL_MIDI_NUMBERS,\n};\n","import MidiNumbers from '../react-piano/MidiNumbers';\n\nconst A = 'A'\nconst B = 'B'\nconst C = 'C'\nconst D = 'D'\nconst E = 'E'\nconst F = 'F'\nconst G = 'G'\n\nconst As = 'A#'\nconst Cs = 'C#'\nconst Ds = 'D#'\nconst Fs = 'F#'\nconst Gs = 'G#'\n\nconst Ab = 'Ab'\nconst Bb = 'Bb'\nconst Db = 'Db'\nconst Eb = 'Eb'\nconst Gb = 'Gb'\n\nconst Major = \"Major\"\nconst Minor = \"Minor\"\nconst Diminished = \"Diminished\"\n\nconst noteNames = {A, B, C, D, E, F, G, As, Cs, Ds, Fs, Gs, Ab, Bb, Db, Eb, Gb}\nconst noteOrder = [C, Cs, D, Ds, E, F, Fs, G, Gs, A, As, B]\nconst noteEquivalents = {\n  [Db]: Cs, [Eb]: Ds, [Gb]: Fs, [Ab]: Gs, [Bb]: As,\n  [Cs]: Db, [Ds]: Eb, [Fs]: Gb, [Gs]: Ab, [As]: Bb,\n }\nconst chordTypes = {Major, Minor, Diminished}\n\nconst indexOfNote = note => noteOrder.indexOf(note) !== -1 ? noteOrder.indexOf(note) : noteOrder.indexOf(noteEquivalents[note])\n\nconst noteSemitonesAhead = (note, interval) => {\n  let newIndex = indexOfNote(note) + interval\n  while (newIndex < 0) {\n    newIndex += 12\n  }\n  if (newIndex >= noteOrder.length) {\n    newIndex -= noteOrder.length * Math.floor(newIndex / noteOrder.length)\n  }\n  // console.log(\"HI!\", note, interval, newIndex)\n  return noteOrder[newIndex]\n}\n\n// this function could probably be written more cleanly\nconst parseNoteLocations = (notes) => {\n  let rearrangedNotes = notes.map((note, notePosition) => setNotePosition(note, notePosition, notes))\n  // some silly stuff to re-shift things upward if the whole collection of notes has slipped down the staff\n  // i uhhhhh this approach really makes no sense.\n  // if (rearrangedNotes.filter(note => note[note.length - 1] === \"3\").length >= 1) {\n  //   rearrangedNotes = rearrangedNotes.map(note => note.slice(0, note.length - 1) + (parseInt(note[note.length - 1], 10) + 1))\n  // }\n  return rearrangedNotes.map(note => MidiNumbers.fromNote(note))\n}\n\nconst setNotePosition = (note, notePosition, chordNotes) => {\n  if (chordHasLowerNotesAhead(note, notePosition, chordNotes)) {\n    return note + \"3\"\n  }\n  return note + \"4\"\n}\n\nconst chordHasLowerNotesAhead = (note, notePosition, chordNotes) => {\n  return chordNotes.slice(notePosition + 1).some(otherNote => noteIsLower(otherNote, note))\n}\n\nconst noteIsLower = (note, comparisonNote) => {\n  return indexOfNote(note) < indexOfNote(comparisonNote)\n}\n\nconst naturalNotes = noteOrder.filter(note => note.length === 1)\n\nconst notesAreEqual = (note1, note2) => {\n  note1 = noteEquivalents[note1] || note1\n  note2 = noteEquivalents[note2] || note2\n  return note1 === note2\n}\n\nconst sortStartingFromKey = (notes, root) => {\n  if (!notes.some(note => notesAreEqual(root, note))) {\n    throw new Error(\"Tried to sort notes by a root note not present in them, this doesn't seem legit.\")\n  }\n  const sortedNotes = [...notes]\n  while (!notesAreEqual(root, sortedNotes[0])) {\n    sortedNotes.push(sortedNotes.shift())\n  }\n  return sortedNotes\n}\n\nexport { noteNames, noteOrder, chordTypes, naturalNotes, noteSemitonesAhead, parseNoteLocations, sortStartingFromKey, noteEquivalents }","import {noteOrder, chordTypes, noteSemitonesAhead, parseNoteLocations} from './notes'\nimport {intervalInKey} from './keySignatures'\n\nconst { Major, Minor, Diminished } = chordTypes\n\nconst intervalLetters = [\n  \"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\"\n]\n\nclass Chord {\n  constructor(root, type, isSeventh) {\n    let notes = [\n      root,\n      noteSemitonesAhead(root, type === Major ? 4 : 3),\n      noteSemitonesAhead(root, type === Diminished ? 6 : 7)\n    ]\n    if (isSeventh) {\n      notes.push(noteSemitonesAhead(root, type === Major ? 11 : 10))\n    }\n    notes = parseNoteLocations(notes) \n  \n    this.name = `${root} ${type}${isSeventh ? \" 7th\" : \"\"}`\n    this.notes = notes\n    this.root = root\n    this.type = type\n    this.keyCount = isSeventh ? \"7th\" : \"Triad\"\n  }\n\n  intervalLetterInKey = (keySignature) => {\n    const letter = intervalLetters[intervalInKey(keySignature, this) - 1]\n    switch (this.type) {\n      case Major:\n        return letter.toUpperCase()\n      case Minor:\n        return letter\n      case Diminished:\n        return letter + \"°\"\n    }\n  }\n}\n\nconst chords = []\nnoteOrder.forEach(root => {\n  [Major, Minor, Diminished].forEach(type => {\n    chords.push(new Chord(root, type, false))\n  })\n})\n\nconst findChord = ({root, type}) => chords.find(chord => chord.root === root && chord.type === type)\n\nexport { chords, findChord }","import {noteNames, noteOrder, naturalNotes, chordTypes, noteSemitonesAhead, parseNoteLocations, sortStartingFromKey} from './notes'\nimport {chords} from './chords'\n\nconst {A, B, C, D, E, F, G, As, Cs, Ds, Fs, Gs, Ab, Bb, Db, Eb, Gb} = noteNames\nconst { Major, Minor, Diminished } = chordTypes\n\nconst chordTypesByInterval = {\n  Major: [\n    Major,\n    Minor,\n    Minor,\n    Major,\n    Major,\n    Minor,\n    Diminished\n  ],\n  Minor: [\n    Minor,\n    Diminished,\n    Major,\n    Minor,\n    Minor,\n    Major,\n    Major\n  ]\n}\n\nconst cumulativeSemitoneOffsetsByInterval = {\n  Major: [0, 2, 4, 5, 7, 9, 11],\n  Minor: [0, 2, 3, 5, 7, 8, 10]\n}\n\n// this \"interval\" indexes from 0 unlike in music, but same idea\nconst chordsInKey = (root, type) => chordTypesByInterval[type].map((chordType, interval) => \n  chords.find(chord => chord.root === noteSemitonesAhead(root, cumulativeSemitoneOffsetsByInterval[type][interval]) &&\n                       chord.type === chordType)\n)\n\nclass KeySignature {\n  constructor(root, type) {\n    this.root = root\n    this.type = type\n    this.chords = chordsInKey(root, type)\n  }\n\n  get chordsAsIntervals() {\n     // a very roundabout way of just getting the index, but this way it's consistent with other code instead of re-implementing, since this is just a helper function\n    return this.chords.map(chord => chord.intervalLetterInKey(this))\n  }\n\n  get name() {\n    return `${this.root} ${this.type}`\n  }\n}\n\nconst keyTypes = [Major, Minor]\nconst keySignatures = []\nnoteOrder.forEach(root => {\n  keyTypes.forEach(type => {\n    keySignatures.push(new KeySignature(root, type))\n  })\n})\n\nconst relativeMinorForKey = (relativeMajor) => keySignatures.find(key => {\n  return key.root === noteSemitonesAhead(relativeMajor.root, 9) && key.type === Minor\n})\n\nconst keysContainingChord = chord => {\n  const keys = keySignatures.filter(key => key.chords.some(chordInKey => chordInKey === chord && key.type === Major))\n               .map(key => ({\n                majorKey: {key: key, intervalInKey: intervalInKey(key, chord)},\n                relativeMinor: {key: relativeMinorForKey(key), intervalInKey: intervalInKey(relativeMinorForKey(key), chord)}\n               }))\n  keys.sort((key1, key2) => key1.majorKey.intervalInKey - key2.majorKey.intervalInKey)\n  return keys\n}\n\nconst intervalInKey = (key, chord) => key.chords.indexOf(chord) + 1\n\nconst circleOfFifths = (count = 12, backwards = false) => {\n  const keys = []\n  for (let i = 0; i < count; i++) {\n    keys.push(noteSemitonesAhead(C, (backwards ? 5 : 7) * i))\n  }\n  return keys\n}\n\n// -------------- begin awful section --------------\n// this whole section is so awful. i hope we rewrite it some day\n// maybe trying to programatically determine all these was just not the way to go\n\n\nconst orderOfKeysWithSharps = circleOfFifths(8).slice(1)\nconst orderOfKeysWithFlats = circleOfFifths(7, true).slice(1)\n\n// these should not be special cases, lol, this is garbage code\n// especially c minor\nconst accidentals = {\n  Major: {C: {type: \"#\", count: 0}},\n  Minor: {C: {type: \"b\", count: 3}}\n}\norderOfKeysWithSharps.forEach((key, index) => { accidentals.Major[key] = {type: \"#\", count: index + 1} })\norderOfKeysWithFlats.forEach((key, index) => { accidentals.Major[key] = {type: \"b\", count: index + 1} })\norderOfKeysWithSharps.forEach(key => { accidentals.Minor[key] = accidentals[Major][noteSemitonesAhead(key, 3)] })\norderOfKeysWithFlats.forEach(key => { accidentals.Minor[key] = accidentals[Major][noteSemitonesAhead(key, 3)] })\n\n// can we programatically determine this? i have no idea. probably.\nconst orderOfAccidentals = {\n  \"#\": [F, C, G, D, A, E, B],\n  \"b\": [B, E, A, D, G, F, C]\n}\n\nconst notesInKey = ({root, type}) => {\n  const accidentalsOfKey = accidentals[type][root]\n\n  let notes = naturalNotes.map(note => (orderOfAccidentals[accidentalsOfKey.type].indexOf(note) !== -1 &&\n                                          orderOfAccidentals[accidentalsOfKey.type].indexOf(note) < accidentalsOfKey.count) ?\n                                          (note + accidentalsOfKey.type) : note )\n  notes = sortStartingFromKey(notes, root)\n\n  return notes\n  // return parseNoteLocations(notes)\n}\n\n// -------------- end awful section --------------\n\n\nconst parseKeyFromString = (keySignatureString) => findKeySignature({root: keySignatureString.split(\"-\")[0], type: keySignatureString.split(\"-\")[1]})\n\nconst findKeySignature = ({root, type}) => keySignatures.find(key => key.root === root && key.type === type)\n\n\nexport {keySignatures, keysContainingChord, notesInKey, circleOfFifths, chordsInKey, parseKeyFromString, intervalInKey, findKeySignature}","import React from 'react';\nimport { useState } from 'react';\nimport { useEffect } from 'react';\nimport './TransitionWrapper.css';\n\nconst TransitionWrapper = ({diffData, children, scale, transitionTime, transitionType}) => {\n\n  const transitionClassNames = {\n    \"slideRight\": \"slide-right\",\n    \"fade\": \"fade\",\n    \"fadeOutOnly\": \"fade-out-only\"\n  }\n  \n  const [cachedRenderContent, setCachedRenderContent] = useState(null)\n  const [currentData, setCurrentData] = useState(null)\n  const [transitionState, setTransitionState] = useState(\"active\")\n\n  useEffect(() => {\n    if (currentData !== diffData) {\n      setCurrentData(diffData)\n      setTransitionState(\"inactive\")\n      setTimeout(() => {\n        setCachedRenderContent(children)\n        setTransitionState(\"active\")\n      }, transitionTime * 1000 / 2)\n    } else if (transitionState === \"active\") {\n      setCachedRenderContent(children)\n    }\n  })\n\n  return (\n    <div style={{transform: `scale(${scale})`}}>\n      <div\n        className={\"transition-wrapper \" + transitionClassNames[transitionType] + \" \" + transitionState}\n        style={{animationDuration: `${transitionTime / 2}s`}}>\n          {cachedRenderContent}\n      </div>\n    </div>\n  );\n\n}\n\nexport default TransitionWrapper","import React from 'react';\nimport classNames from 'classnames';\n\nimport MidiNumbers from './MidiNumbers';\nimport { useState } from 'react';\n\nconst Key = (props) => {\n  const {\n    naturalKeyWidth,\n    accidentalWidthRatio = 0.65,\n    midiNumber,\n    gliss,\n    useTouchEvents,\n    accidental,\n    active,\n    confirmedCorrect,\n    incorrect,\n    highlighted,\n    velocity,\n    keyPlayPulses,\n    disabled,\n    children,\n    pitchPositions = {\n      C: 0,\n      Db: 0.55,\n      D: 1,\n      Eb: 1.8,\n      E: 2,\n      F: 3,\n      Gb: 3.5,\n      G: 4,\n      Ab: 4.7,\n      A: 5,\n      Bb: 5.85,\n      B: 6,\n    }\n  } = props\n\n  const onPlayNoteInput = () => {\n    props.onPlayNoteInput(midiNumber);\n  };\n\n  const onStopNoteInput = () => {\n    props.onStopNoteInput(midiNumber);\n  };\n\n  // Key position is represented by the number of natural key widths from the left\n  function getAbsoluteKeyPosition(midiNumber) {\n    const OCTAVE_WIDTH = 7;\n    const { octave, pitchName } = MidiNumbers.getAttributes(midiNumber);\n    const pitchPosition = pitchPositions[pitchName];\n    const octavePosition = OCTAVE_WIDTH * octave;\n    return pitchPosition + octavePosition;\n  }\n\n  function getRelativeKeyPosition(midiNumber) {\n    return (\n      getAbsoluteKeyPosition(midiNumber) -\n      getAbsoluteKeyPosition(props.noteRange.first)\n    );\n  }\n\n\n  const pulseColors = {\n    incorrect: \"255, 0, 47\",\n    active: \"0, 170, 255\"\n  }\n  const pulseColor = incorrect ? pulseColors.incorrect : pulseColors.active\n  const [alreadyActiveVelocity, setAlreadyActiveVelocity] = useState(0)\n  const [pulseStyle, setPulseStyle] = useState({})\n  if (active && alreadyActiveVelocity < velocity) {\n    setAlreadyActiveVelocity(velocity)\n    setPulseStyle({boxShadow: `0 0 0 0 rgba(${pulseColor}, 0.7)`, transition: \"box-shadow 0ms, background-color 500ms\"})\n    setTimeout(() => {\n      setPulseStyle({boxShadow: `0 0 20px ${20 * velocity / 60}px rgba(${pulseColor}, 0)`, transition: \"box-shadow 400ms, background-color 500ms\"})\n    }, 0)\n  } else if (!active && alreadyActiveVelocity > 0) {\n    setAlreadyActiveVelocity(0)\n    setPulseStyle({transition: \"box-shadow 400ms, background-color 500ms\"})\n  }\n\n  // Need to conditionally include/exclude handlers based on useTouchEvents,\n  // because otherwise mobile taps double fire events.\n  return (\n    <div\n      className={classNames('ReactPiano__Key', {\n        'ReactPiano__Key--accidental': accidental,\n        'ReactPiano__Key--natural': !accidental,\n        'ReactPiano__Key--disabled': disabled,\n        'ReactPiano__Key--active': active,\n        'ReactPiano__Key--correct': confirmedCorrect,\n        'ReactPiano__Key--incorrect': incorrect && active,\n        'ReactPiano__Key--highlighted': highlighted,\n      })}\n      style={{\n        left: ratioToPercentage(getRelativeKeyPosition(midiNumber) * naturalKeyWidth),\n        width: ratioToPercentage(\n          accidental ? accidentalWidthRatio * naturalKeyWidth : naturalKeyWidth,\n        ),\n        ...(keyPlayPulses ? pulseStyle : {})\n      }}\n      onMouseDown={useTouchEvents ? null : onPlayNoteInput}\n      onMouseUp={useTouchEvents ? null : onStopNoteInput}\n      onMouseEnter={gliss ? onPlayNoteInput : null}\n      onMouseLeave={onStopNoteInput}\n      onTouchStart={useTouchEvents ? onPlayNoteInput : null}\n      onTouchCancel={useTouchEvents ? onStopNoteInput : null}\n      onTouchEnd={useTouchEvents ? onStopNoteInput : null}\n    >\n      <div className=\"ReactPiano__NoteLabelContainer\">{children}</div>\n    </div>\n  );\n}\n\nfunction ratioToPercentage(ratio) {\n  return `${ratio * 100}%`;\n}\n\nexport default Key;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport range from 'just-range';\nimport classNames from 'classnames';\n\nimport Key from './Key';\nimport MidiNumbers from './MidiNumbers';\nimport TransitionWrapper from '../components/TransitionWrapper';\n\nclass Keyboard extends React.Component {\n  static propTypes = {\n    noteRange: noteRangePropType,\n    activeNotes: PropTypes.arrayOf(PropTypes.shape({\n      key: PropTypes.number.isRequired,\n      velocity: PropTypes.number.isRequired,\n    })),\n    onPlayNoteInput: PropTypes.func.isRequired,\n    onStopNoteInput: PropTypes.func.isRequired,\n    renderNoteLabel: PropTypes.func.isRequired,\n    keyWidthToHeight: PropTypes.number.isRequired,\n    className: PropTypes.string,\n    disabled: PropTypes.bool,\n    gliss: PropTypes.bool,\n    useTouchEvents: PropTypes.bool,\n    // If width is not provided, must have fixed width and height in parent container\n    width: PropTypes.number,\n  };\n\n  static defaultProps = {\n    disabled: false,\n    gliss: false,\n    useTouchEvents: false,\n    keyWidthToHeight: 0.33,\n    renderNoteLabel: () => {},\n    highlightedNotes: []\n  };\n\n  // Range of midi numbers on keyboard\n  getMidiNumbers() {\n    return range(this.props.noteRange.first, this.props.noteRange.last + 1);\n  }\n\n  getNaturalKeyCount() {\n    return this.getMidiNumbers().filter((number) => {\n      const { isAccidental } = MidiNumbers.getAttributes(number);\n      return !isAccidental;\n    }).length;\n  }\n\n  // Returns a ratio between 0 and 1\n  getNaturalKeyWidth() {\n    return 1 / this.getNaturalKeyCount();\n  }\n\n  getWidth() {\n    return this.props.width ? this.props.width : '100%';\n  }\n\n  getHeight() {\n    if (!this.props.width) {\n      return '100%';\n    }\n    const keyWidth = this.props.width * this.getNaturalKeyWidth();\n    return `${keyWidth / this.props.keyWidthToHeight}px`;\n  }\n\n  render() {\n    const naturalKeyWidth = this.getNaturalKeyWidth();\n    return (\n      <div\n        className={classNames('ReactPiano__Keyboard', this.props.className)}\n        style={{ width: this.getWidth(), height: this.getHeight() }}\n      >\n        {this.getMidiNumbers().map((midiNumber) => {\n          const playedNoteTutorial = this.props.activeNotesTutorial.find(note => note.key === midiNumber)\n          const playedNote = playedNoteTutorial || this.props.activeNotes.find(note => note.key === midiNumber)\n\n          const { note, isAccidental } = MidiNumbers.getAttributes(midiNumber);\n          const isActive = !this.props.disabled && playedNote !== undefined\n          const isIncorrect = !this.props.disabled && !this.props.correctNotes.includes(midiNumber)\n          const isConfirmedCorrect = !this.props.disabled && this.props.correctNotes.includes(midiNumber) && (this.props.keysAreCorrect || playedNoteTutorial !== undefined)\n          const isHighlighted = !this.props.disabled && !isActive && this.props.highlightedNotes.includes(midiNumber)\n          \n          const intervalOfNote = this.props.highlightedNotes.indexOf(midiNumber)\n          const displayInterval = intervalOfNote !== -1 &&\n                                  intervalOfNote < this.props.intervalOfChord &&\n                                  this.props.intervalMarkersToShow >= intervalOfNote\n          return (\n            <Key\n              naturalKeyWidth={naturalKeyWidth}\n              midiNumber={midiNumber}\n              noteRange={this.props.noteRange}\n              active={isActive}\n              incorrect={isIncorrect}\n              confirmedCorrect={isConfirmedCorrect}\n              highlighted={isHighlighted}\n              accidental={isAccidental}\n              disabled={this.props.disabled}\n              onPlayNoteInput={this.props.onPlayNoteInput}\n              onStopNoteInput={this.props.onStopNoteInput}\n              gliss={this.props.gliss}\n              useTouchEvents={this.props.useTouchEvents}\n              key={midiNumber}\n              velocity={playedNote !== undefined ? playedNote.velocity : null}\n              keyPlayPulses={this.props.keyPlayPulses}\n            >\n              <TransitionWrapper diffData={displayInterval} scale={1} transitionTime={0.85} transitionType=\"fadeOutOnly\">\n                {displayInterval ? <IntervalLabel keyboardWidth={this.getWidth()} interval={intervalOfNote} isActive={isActive} isAccidental={isAccidental}/> : null}\n              </TransitionWrapper>\n            </Key>\n          );\n        })}\n      </div>\n    );\n  }\n}\n\nconst IntervalLabel = ({interval, isActive, isAccidental, keyboardWidth}) => (\n  <div\n    className={classNames('ReactPiano__NoteLabel', {\n      'ReactPiano__NoteLabel--active': isActive,\n      'ReactPiano__NoteLabel--accidental': isAccidental,\n      'ReactPiano__NoteLabel--natural': !isAccidental,\n    })}\n    style={{fontSize: keyboardWidth === 1000 ? \"22px\" : \"16px\"}} // this is comically hackily specific and i don't care\n  >\n    {interval + 1}\n  </div>\n)\n\nfunction isNaturalMidiNumber(value) {\n  if (typeof value !== 'number') {\n    return false;\n  }\n  return MidiNumbers.NATURAL_MIDI_NUMBERS.includes(value);\n}\n\nfunction noteRangePropType(props, propName, componentName) {\n  const { first, last } = props[propName];\n  if (!first || !last) {\n    return new Error(\n      `Invalid prop ${propName} supplied to ${componentName}. ${propName} must be an object with .first and .last values.`,\n    );\n  }\n  if (!isNaturalMidiNumber(first) || !isNaturalMidiNumber(last)) {\n    return new Error(\n      `Invalid prop ${propName} supplied to ${componentName}. ${propName} values must be valid MIDI numbers, and should not be accidentals (sharp or flat notes).`,\n    );\n  }\n  if (first >= last) {\n    return new Error(\n      `Invalid prop ${propName} supplied to ${componentName}. ${propName}.first must be smaller than ${propName}.last.`,\n    );\n  }\n}\n\nexport default Keyboard;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport difference from 'lodash.difference';\nimport Keyboard from './Keyboard';\n\nclass ControlledPiano extends React.Component {\n  static propTypes = {\n    noteRange: PropTypes.object.isRequired,\n    activeNotes: PropTypes.arrayOf(PropTypes.shape({\n      key: PropTypes.number.isRequired,\n      velocity: PropTypes.number.isRequired,\n    })).isRequired,\n    playNote: PropTypes.func.isRequired,\n    stopNote: PropTypes.func.isRequired,\n    onPlayNoteInput: PropTypes.func.isRequired,\n    onStopNoteInput: PropTypes.func.isRequired,\n    renderNoteLabel: PropTypes.func.isRequired,\n    className: PropTypes.string,\n    disabled: PropTypes.bool,\n    width: PropTypes.number,\n    keyWidthToHeight: PropTypes.number,\n    keyboardShortcuts: PropTypes.arrayOf(\n      PropTypes.shape({\n        key: PropTypes.string.isRequired,\n        midiNumber: PropTypes.number.isRequired,\n      }),\n    ),\n  };\n\n  static defaultProps = {\n    renderNoteLabel: ({ keyboardShortcut, midiNumber, isActive, isAccidental }) =>\n      keyboardShortcut ? (\n        <div\n          className={classNames('ReactPiano__NoteLabel', {\n            'ReactPiano__NoteLabel--active': isActive,\n            'ReactPiano__NoteLabel--accidental': isAccidental,\n            'ReactPiano__NoteLabel--natural': !isAccidental,\n          })}\n        >\n          {keyboardShortcut}\n        </div>\n      ) : null,\n  };\n\n  state = {\n    isMouseDown: false,\n    useTouchEvents: false,\n  };\n\n  componentDidMount() {\n    window.addEventListener('keydown', this.onKeyDown);\n    window.addEventListener('keyup', this.onKeyUp);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('keydown', this.onKeyDown);\n    window.removeEventListener('keyup', this.onKeyUp);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.props.activeNotes !== prevProps.activeNotes) {\n      this.handleNoteChanges({\n        prevActiveNotes: prevProps.activeNotes || [],\n        nextActiveNotes: this.props.activeNotes || [],\n      });\n    }\n  }\n\n  // This function is responsible for diff'ing activeNotes\n  // and playing or stopping notes accordingly.\n  handleNoteChanges = ({ prevActiveNotes, nextActiveNotes }) => {\n    if (this.props.disabled) {\n      return;\n    }\n    const notesStopped = difference(prevActiveNotes, nextActiveNotes);\n    const notesStarted = difference(nextActiveNotes, prevActiveNotes);\n    notesStarted.forEach((midiNumber) => {\n      this.props.playNote(midiNumber);\n    });\n    notesStopped.forEach((midiNumber) => {\n      this.props.stopNote(midiNumber);\n    });\n  };\n\n  getMidiNumberForKey = (key) => {\n    if (!this.props.keyboardShortcuts) {\n      return null;\n    }\n    const shortcut = this.props.keyboardShortcuts.find((sh) => sh.key === key);\n    return shortcut && shortcut.midiNumber;\n  };\n\n  getKeyForMidiNumber = (midiNumber) => {\n    if (!this.props.keyboardShortcuts) {\n      return null;\n    }\n    const shortcut = this.props.keyboardShortcuts.find((sh) => sh.midiNumber === midiNumber);\n    return shortcut && shortcut.key;\n  };\n\n  onKeyDown = (event) => {\n    // Don't conflict with existing combinations like ctrl + t\n    if (event.ctrlKey || event.metaKey || event.shiftKey) {\n      return;\n    }\n    const midiNumber = this.getMidiNumberForKey(event.key);\n    if (midiNumber) {\n      this.onPlayNoteInput(midiNumber);\n    }\n  };\n\n  onKeyUp = (event) => {\n    // This *should* also check for event.ctrlKey || event.metaKey || event.ShiftKey like onKeyDown does,\n    // but at least on Mac Chrome, when mashing down many alphanumeric keystrokes at once,\n    // ctrlKey is fired unexpectedly, which would cause onStopNote to NOT be fired, which causes problematic\n    // lingering notes. Since it's fairly safe to call onStopNote even when not necessary,\n    // the ctrl/meta/shift check is removed to fix that issue.\n    const midiNumber = this.getMidiNumberForKey(event.key);\n    if (midiNumber) {\n      this.onStopNoteInput(midiNumber);\n    }\n  };\n\n  onPlayNoteInput = (midiNumber) => {\n    if (this.props.disabled) {\n      return;\n    }\n    // Pass in previous activeNotes for recording functionality\n    this.props.onPlayNoteInput(midiNumber, this.props.activeNotes);\n  };\n\n  onStopNoteInput = (midiNumber) => {\n    if (this.props.disabled) {\n      return;\n    }\n    // Pass in previous activeNotes for recording functionality\n    this.props.onStopNoteInput(midiNumber, this.props.activeNotes);\n  };\n\n  onMouseDown = () => {\n    this.setState({\n      isMouseDown: true,\n    });\n  };\n\n  onMouseUp = () => {\n    this.setState({\n      isMouseDown: false,\n    });\n  };\n\n  onTouchStart = () => {\n    this.setState({\n      useTouchEvents: true,\n    });\n  };\n\n  renderNoteLabel = ({ midiNumber, isActive, isAccidental }) => {\n    const keyboardShortcut = this.getKeyForMidiNumber(midiNumber);\n    return this.props.renderNoteLabel({ keyboardShortcut, midiNumber, isActive, isAccidental });\n  };\n\n  render() {\n    return (\n      <div\n        style={{ width: '100%', height: '100%' }}\n        onMouseDown={this.onMouseDown}\n        onMouseUp={this.onMouseUp}\n        onTouchStart={this.onTouchStart}\n        data-testid=\"container\"\n      >\n        <Keyboard\n          noteRange={this.props.noteRange}\n          onPlayNoteInput={this.onPlayNoteInput}\n          onStopNoteInput={this.onStopNoteInput}\n          activeNotes={this.props.activeNotes}\n          correctNotes={this.props.correctNotes}\n          keysAreCorrect={this.props.keysAreCorrect}\n          highlightedNotes={this.props.highlightedNotes}\n          className={this.props.className}\n          disabled={this.props.disabled}\n          width={this.props.width}\n          keyWidthToHeight={this.props.keyWidthToHeight}\n          gliss={this.state.isMouseDown}\n          useTouchEvents={this.state.useTouchEvents}\n          renderNoteLabel={this.renderNoteLabel}\n          keyPlayPulses={this.props.keyPlayPulses}\n          intervalOfChord={this.props.intervalOfChord}\n          intervalMarkersToShow={this.props.intervalMarkersToShow}\n          activeNotesTutorial={this.props.activeNotesTutorial}\n        />\n      </div>\n    );\n  }\n}\n\nexport default ControlledPiano;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ControlledPiano from './ControlledPiano';\n\nclass Piano extends React.Component {\n  static propTypes = {\n    noteRange: PropTypes.object.isRequired,\n    activeNotes: PropTypes.arrayOf(PropTypes.shape({\n      key: PropTypes.number.isRequired,\n      velocity: PropTypes.number.isRequired,\n    })),\n    playNote: PropTypes.func.isRequired,\n    stopNote: PropTypes.func.isRequired,\n    onPlayNoteInput: PropTypes.func,\n    onStopNoteInput: PropTypes.func,\n    renderNoteLabel: PropTypes.func,\n    className: PropTypes.string,\n    disabled: PropTypes.bool,\n    width: PropTypes.number,\n    keyWidthToHeight: PropTypes.number,\n    keyboardShortcuts: PropTypes.arrayOf(\n      PropTypes.shape({\n        key: PropTypes.string.isRequired,\n        midiNumber: PropTypes.number.isRequired,\n      }),\n    ),\n  };\n\n  state = {\n    activeNotes: this.props.activeNotes || [],\n  };\n\n  componentDidUpdate(prevProps) {\n    // Make activeNotes \"controllable\" by using internal\n    // state by default, but allowing prop overrides.\n    if (\n      prevProps.activeNotes !== this.props.activeNotes &&\n      this.state.activeNotes !== this.props.activeNotes\n    ) {\n      this.setState({\n        activeNotes: this.props.activeNotes || [],\n      });\n    }\n  }\n\n  handlePlayNoteInput = (midiNumber) => {\n    this.setState((prevState) => {\n      // Need to be handled inside setState in order to set prevActiveNotes without\n      // race conditions.\n      if (this.props.onPlayNoteInput) {\n        this.props.onPlayNoteInput(midiNumber, { prevActiveNotes: prevState.activeNotes });\n      }\n\n      // Don't append note to activeNotes if it's already present\n      if (prevState.activeNotes.includes(midiNumber)) {\n        return null;\n      }\n      return {\n        activeNotes: prevState.activeNotes.concat(midiNumber),\n      };\n    });\n  };\n\n  handleStopNoteInput = (midiNumber) => {\n    this.setState((prevState) => {\n      // Need to be handled inside setState in order to set prevActiveNotes without\n      // race conditions.\n      if (this.props.onStopNoteInput) {\n        this.props.onStopNoteInput(midiNumber, { prevActiveNotes: this.state.activeNotes });\n      }\n      return {\n        activeNotes: prevState.activeNotes.filter((note) => midiNumber !== note),\n      };\n    });\n  };\n\n  render() {\n    const { activeNotes, onPlayNoteInput, onStopNoteInput, ...otherProps } = this.props;\n    return (\n      <ControlledPiano\n        activeNotes={this.state.activeNotes}\n        onPlayNoteInput={this.handlePlayNoteInput}\n        onStopNoteInput={this.handleStopNoteInput}\n        {...otherProps}\n      />\n    );\n  }\n}\n\nexport default Piano;\n","import React from 'react';\nimport Piano from '../react-piano/Piano';\nimport MidiNumbers from '../react-piano/MidiNumbers';\nimport '../react-piano/styles.css';\nimport './pianoStyles.css';\nimport { useEffect } from 'react';\nimport { useState } from 'react';\n\nconst firstNote = MidiNumbers.fromNote('c3');\nconst lastNote = MidiNumbers.fromNote('f5');\n\nconst PianoGraphic = ({activeNotes, keysAreCorrect, correctNotes, keyPlayPulses, highlightedNotes, renderScale, intervalOfChord, activeNotesTutorial = []}) => {\n  const [intervalMarkersToShow, setIntervalMarkersToShow] = useState(-1) // wait a single delay loop before spawning the first one\n  useEffect(() => {\n    let currentIntervalMarkersToShow = intervalMarkersToShow\n    if (intervalOfChord !== null) {\n      const markerSpawningInterval = setInterval(() => {\n        currentIntervalMarkersToShow++\n        setIntervalMarkersToShow(currentIntervalMarkersToShow)\n        if (currentIntervalMarkersToShow >= intervalOfChord) {\n          clearInterval(markerSpawningInterval)\n        }\n      }, 400)\n    }\n  }, [intervalOfChord])\n\n  // account for notes without velocities\n  activeNotes = activeNotes.length > 0 && activeNotes[0].velocity === undefined ? activeNotes.map(note => ({key: note, velocity: 1})) : activeNotes\n\n  return (\n    <div className=\"piano-wrapper\">\n      <Piano\n        noteRange={{ first: firstNote, last: lastNote }}\n        playNote={(midiNumber) => {\n          // Play a given note - see notes below\n        }}\n        stopNote={(midiNumber) => {\n          // Stop playing a given note - see notes below\n        }}\n        width={1000 * renderScale}\n        activeNotes={activeNotes}\n        correctNotes={correctNotes}\n        keysAreCorrect={keysAreCorrect}\n        keyPlayPulses={keyPlayPulses}\n        highlightedNotes={highlightedNotes}\n        intervalOfChord={intervalOfChord}\n        intervalMarkersToShow={intervalMarkersToShow}\n        activeNotesTutorial={activeNotesTutorial}\n      />\n    </div>\n  )\n}\n\nexport default PianoGraphic;","import React, { useState } from 'react';\nimport KeySignatureCircle from './KeySignatureCircle';\nimport ChordProgressList from './ChordProgressList';\nimport { findKeySignature } from '../chordLogic/keySignatures';\n\nfunction ProgressScreen({progress}) {\n\n  const unlockedKeys = progress.getUnlockedKeySignatures()\n\n  const [keyMousedOver, setKeyMousedOver] = useState(null)\n\n  return (\n    <div style={{width: \"100%\", height: \"100vh\", display: \"flex\", justifyContent: \"center\", alignItems: \"center\"}}>\n      <div style={{display: \"flex\", flexFlow: \"column\"}}>\n        <div style={{display: \"flex\", justifyContent: \"center\", fontSize: \"25px\", marginBottom: \"25px\"}}>Scales</div>\n        <KeySignatureCircle onKeyMousedOver={setKeyMousedOver} unlockedKeys={unlockedKeys}/>\n      </div>\n      <div style={{visibility: keyMousedOver !== null ? \"visible\" : \"hidden\", width: \"500px\", transform: \"scale(0.75)\"}}>\n        {keyMousedOver !== null ? <ChordProgressList\n          // TODO -- don't hardcode this to major\n          keySignature={findKeySignature({root: keyMousedOver, type: \"Major\"})}\n          previouslyMasteredChords={progress.getLearnedChordsInKey({root: keyMousedOver, type: \"Major\"})}\n          mode={\"chords\"}\n        /> : null}\n      </div>\n    </div>\n  );\n}\n\nexport default ProgressScreen;","/** @jsx jsx */\n/** @jsxFrag React.Fragment */\nimport { jsx, css } from '@emotion/react'\n\nimport React from 'react';\nimport { combineStyles } from '../utils/utils';\n\nfunction RoundedButton({ onClick, children, enabled, styles, className = \"\", active = false }) {\n\n  return (\n    <div css={css`\n      height: 40px;\n      min-width: fit-content;\n      width: 120px;\n      padding: 0px 8px;\n      border: 2px solid #fff0;\n      border-radius: 12px;\n      margin: 10px;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      color: hsl(200, 100%, 60%);\n      text-shadow: #00aaff 0px 0px 10px;\n      font-weight: bold;\n      /* background-color: #fff8dc18; */\n      transition: border 0.2s, color 0.2s, background-color 0.2s;\n      user-select: none;\n      font-size: 18px;\n\n      ${enabled && css`\n        border-color: #ffffff08;\n        color: #fffb;\n        background-color: #fff8dc10;\n        cursor: pointer;\n        text-shadow: none;\n\n        &:hover, &:active {\n          transition: none;\n          background-color: #fff8dc28;\n          border-color:#fff3;\n          color: #fff;\n          border-style: outset;\n        }\n\n        &:active {\n          border-style: inset;\n        }\n      `}\n\n      ${active && css`\n        border-color: rgba(255, 255, 255, 0.75);\n        color: white;\n        /* border-width: 1px; */\n      `}\n      \n    `} onClick={onClick}>\n      {children}\n    </div>\n  );\n}\n\nexport default RoundedButton;","import { findChord } from \"../chordLogic/chords\"\nimport { chordsInKey, circleOfFifths, findKeySignature } from \"../chordLogic/keySignatures\"\n\nconst keyUnlockOrder = [...circleOfFifths(6), ...circleOfFifths(7, true).slice(1)]\n\nclass User {\n  constructor(existingProgression) {\n    if (existingProgression === null) {\n      this.masteryProgress = {chords: {Major: {}, Minor: {}}, intervals: {Major: {}, Minor: {}}}\n      this.mostRecentPracticeSession = {}\n    } else {\n      existingProgression = JSON.parse(existingProgression)\n      this.masteryProgress = existingProgression.masteryProgress\n      this.mostRecentPracticeSession = existingProgression.mostRecentPracticeSession\n      this.restorePracticeSessionObjectRelations()\n    }\n  }\n\n  getChordsToLearnInKey = (keySignature, includeAlreadyLearned = false, noLimit = false) => {\n    const keyRoot = keySignature.root\n    const keyType = keySignature.type\n    const alreadyLearnedChords = this.getLearnedChordsInKey(keySignature)\n    const learningLimit = alreadyLearnedChords.length >= 3 ? 2 : 3 // this is pretty arbitrary but shrug\n    let chords = chordsInKey(keyRoot, keyType).filter(chord => !this.hasLearnedChord(keySignature, chord))\n    if (!noLimit) {\n      chords = chords.slice(0, learningLimit)\n    }\n    return includeAlreadyLearned ? [...alreadyLearnedChords, ...chords] : chords\n  }\n\n  hasLearnedChord = ({root, type}, chord) => \n    this.chordMastery[type] &&\n    this.chordMastery[type][root] &&\n    this.chordMastery[type][root][chord.name]\n\n  hasLearnedInterval = ({root, type}, interval) => \n    this.intervalMastery[type] &&\n    this.intervalMastery[type][root] &&\n    this.intervalMastery[type][root][interval]\n\n  savePracticeSession = (sessionData) => {\n    switch (sessionData.type) {\n      case \"intervals\":\n        const intervalsLearned = sessionData.intervalsPracticed.filter(interval => !this.hasLearnedInterval(sessionData.keySignature, interval))\n        this.mostRecentPracticeSession = {\n          type: sessionData.type,\n          keySignature: sessionData.keySignature,\n          intervalsPerfected: sessionData.intervalsPerfected.filter(interval => !intervalsLearned.includes(interval)), // can't make mastery progress on a just-learned interval\n          intervalsLearned: intervalsLearned\n        }\n        this.mostRecentPracticeSession.intervalsLearned.forEach(interval => this.setIntervalLearned(sessionData.keySignature, interval))\n        break\n      case \"chords\":\n        this.mostRecentPracticeSession = sessionData\n        sessionData.chords.forEach(chord => this.setChordLearned(sessionData.keySignature, chord))\n    }\n    localStorage.setItem(\"progress\", JSON.stringify({masteryProgress: this.masteryProgress, mostRecentPracticeSession: this.mostRecentPracticeSession}))\n  }\n\n  setChordLearned({root, type}, chord) {\n    if (this.chordMastery[type][root] === undefined) {\n      this.chordMastery[type][root] = {}\n    }\n    this.chordMastery[type][root][chord.name] = true\n  }\n\n  setIntervalLearned({root, type}, interval) {\n    if (this.intervalMastery[type][root] === undefined) {\n      this.intervalMastery[type][root] = {}\n    }\n    this.intervalMastery[type][root][interval] = true\n  }\n\n  getReviewData = () => this.mostRecentPracticeSession\n\n  getLearnedChordsInKey = (keySignature) => \n    chordsInKey(keySignature.root, keySignature.type).filter(chord => this.hasLearnedChord(keySignature, chord))\n  \n  getLearnedIntervalsInKey = (keySignature) => {\n    const intervals = []\n    for (let interval = 0; interval < 7; interval++) {\n      if (this.hasLearnedInterval(keySignature, interval)) {\n        intervals.push(interval)\n      }\n    }\n    return intervals\n  }\n  \n  hasMasteredChordsInKey = (keySignature) => this.getLearnedChordsInKey(keySignature).length === chordsInKey(keySignature.root, keySignature.type).length\n  \n  getUnlockedKeySignatures = () => {\n    let unlockedKeys = 1\n    const keys = circleOfFifths()\n    while (unlockedKeys <= keys.length) {\n      // TODO -- don't hardcode this to major\n      if (this.hasMasteredChordsInKey(findKeySignature({root: keys[unlockedKeys - 1], type: \"Major\"}))) {\n        unlockedKeys++\n      } else {\n        break\n      }\n    }\n    return keyUnlockOrder.slice(0, unlockedKeys)\n  }\n\n  get chordMastery() { return this.masteryProgress.chords }\n  get intervalMastery() { return this.masteryProgress.intervals }\n\n  restorePracticeSessionObjectRelations() {\n    if (this.mostRecentPracticeSession.chords) {\n      this.mostRecentPracticeSession.chords = this.mostRecentPracticeSession.chords.map(chord => findChord(chord))\n    }\n    this.mostRecentPracticeSession.keySignature = findKeySignature(this.mostRecentPracticeSession.keySignature)\n  }\n}\n\nconst loadProgress = () => new User(localStorage.getItem(\"progress\"))\n\nexport { loadProgress }","import React, { useState } from 'react';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { parseKeyFromString } from '../chordLogic/keySignatures';\nimport IntervalsTutorial from './IntervalsTutorial';\nimport ProgressionsTutorial from './ProgressionsTutorial';\n\nfunction LearningIntervalsScreen({progress}) {\n  const { keySignatureString } = useParams()\n  const keySignature = parseKeyFromString(keySignatureString)\n\n  const history = useHistory();\n  const goToPracticeScreen = () => {\n    history.push(`/practice/${keySignatureString}/intervals`)\n  }\n\n  const [currentTutorial, setCurrentTutorial] = useState(\"progressions\")\n  const intervalsTutorialFinished = () => {\n    setCurrentTutorial(\"progressions\")\n  }\n  const progressionsTutorialFinished = () => {\n    setCurrentTutorial(\"finished\")\n  }\n  \n  const practiceButtonEnabled = currentTutorial === \"finished\"\n\n  const styles = {\n    practiceButton: {\n      width: \"100px\",\n      transition: \"opacity 0.5s cubic-bezier(0.390, 0.575, 0.565, 1.000)\",\n      opacity: practiceButtonEnabled ? 1 : 0,\n      visibility: practiceButtonEnabled ? \"visible\" : \"hidden\"\n    }\n  }\n  \n  const tutorialComponents = {\n    intervals: <IntervalsTutorial keySignature={keySignature} tutorialFinished={intervalsTutorialFinished}/>,\n    progressions: <ProgressionsTutorial keySignature={keySignature} tutorialFinished={progressionsTutorialFinished}/>,\n    finished: null\n  }\n\n  return (\n    <div>\n      {tutorialComponents[currentTutorial]}\n      <button style={styles.practiceButton} onClick={goToPracticeScreen}>Practice</button>\n    </div>\n  )\n}\n\nexport default LearningIntervalsScreen;","const { useEffect, useState } = require('react')\nvar Soundfont = require('soundfont-player')\nconst { useAwait } = require('./utils/hooks')\nexport const audioContext = new AudioContext()\nconst loadInstrument = async () => {\n  return await Soundfont.instrument(audioContext, 'acoustic_grand_piano')\n}\n\nexport const useAudioOutput = () => {\n  const [instrument, setInstrument] = useState(null)\n  useEffect(() => {\n    loadInstrument().then(setInstrument)\n  }, [])\n\n  return instrument\n}\n\n// module.exports = { useAudioOutput, audioContext }","import React, { useMemo } from 'react';\nimport { useState } from 'react';\nimport { findKeySignature } from '../chordLogic/keySignatures';\nimport {audioContext, useAudioOutput} from \"../sound\"\nimport { randomNumber } from '../utils/utils';\nimport RoundedButton from './RoundedButton';\n\nfunction ListeningPracticeScreen({progress}) {\n  const initialProgression = useMemo(() => [randomNumber(7) + 1, randomNumber(7) + 1], [])\n\n  const [progression, setProgression] = useState(initialProgression)\n  const key = findKeySignature({root: \"C\", type: \"Major\"})\n  const chordsToPlay = progression.map(interval => key.chords[interval - 1])\n\n  const audio = useAudioOutput()\n  const audioReady = audio !== null\n\n  const play = () => {\n    if (audioReady) {\n      const notePlays = chordsToPlay.reduce((notePlays, chord, index) => [...notePlays, ...chord.notes.map(note => ({time: index * 0.5, note, duration: 0.5}))], [])\n      console.log(notePlays)\n      // audio.play('C4')\n      // audio.play('E4')\n      // audio.play('G4')\n      audio.schedule(audioContext.currentTime, notePlays)\n    }\n  }\n\n  const [progressionsGuessed, setProgressionsGuessed] = useState({})\n  const intervalClicked = (interval, progressionIndex) => {\n    console.log(interval, progressionIndex)\n    const correct = progression[progressionIndex] === interval + 1\n    const newProgressionsGuessed = {...progressionsGuessed}\n    newProgressionsGuessed[progressionIndex] = correct\n    setProgressionsGuessed(newProgressionsGuessed)\n  }\n  console.log(progressionsGuessed)\n\n  return (\n    <div>\n      <div>Key: {key.name}</div>\n      {/* <ProgressionChooser progression={progression} setProgression={setProgression}/> */}\n      <ProgressionQuizAnswerButtons length={progression.length} intervalClicked={intervalClicked}/>\n      <button disabled={!audioReady} onClick={() => play(true)}>{audioReady ? \"Play\" : \"Audio Loading...\"}</button>\n    </div>\n  );\n}\n\nconst ProgressionQuizAnswerButtons = ({length, intervalClicked}) => {\n  const controls = []\n  for (let i = 0; i < length; i++) {\n    controls.push(\n      <ProgressionQuizAnswerRowColumn\n        key={i}\n        intervalSelected={(interval) => intervalClicked(interval, i)}\n      />\n    )\n  }\n  return (\n    <div style={{display: \"flex\", flexFlow: \"row\", alignItems: \"center\"}}>\n      {controls}\n    </div>\n  )\n}\n\nconst ProgressionQuizAnswerRowColumn = ({intervalSelected}) => {\n  const intervals = []\n  for (let i = 0; i < 7; i++) { intervals.push(i) }\n  return (\n    <div>\n      {intervals.map(interval =>\n        <RoundedButton enabled={true} key={interval} onClick={() => intervalSelected(interval)}>\n          {interval + 1}\n        </RoundedButton>\n      )}\n    </div>\n  )\n}\n\n\nconst ProgressionChooser = ({progression, setProgression}) => {\n  const intervalSelected = (interval, progressionIndex) => {\n    const newProgression = [...progression]\n    newProgression[progressionIndex] = interval + 1\n    setProgression(newProgression)\n  }\n\n  const addInterval = () => {\n    const newProgression = [...progression, 1]\n    setProgression(newProgression)\n  }\n\n  return (\n    <div style={{display: \"flex\", flexFlow: \"row\", alignItems: \"center\"}}>\n      {progression.map((interval, progressionIndex) =>\n        <ProgressionControl\n          key={`${progressionIndex}-${interval}`}\n          activeInterval={interval}\n          intervalSelected={(interval) => intervalSelected(interval, progressionIndex)}\n        />\n      )}\n      <RoundedButton onClick={addInterval} enabled={true}>Add</RoundedButton>\n    </div>\n  )\n}\n\nconst ProgressionControl = ({activeInterval, intervalSelected}) => {\n  const intervals = []\n  for (let i = 0; i < 7; i++) { intervals.push(i) }\n  return (\n    <div>\n      {intervals.map(interval =>\n        <RoundedButton enabled={interval !== activeInterval - 1} key={interval} onClick={() => intervalSelected(interval)}>\n          {interval + 1}\n        </RoundedButton>\n      )}\n    </div>\n  )\n}\n\nexport default ListeningPracticeScreen;","import { noteNames } from \"../chordLogic/notes\"\n\nconst {A, B, C, D, E, F, G, As, Cs, Ds, Fs, Gs, Ab, Bb, Db, Eb, Gb} = noteNames\n\nconst possibleTones = [C, D, E, F, G, A, B]\nconst possibleOctaves = [\"3\", \"4\", \"5\"]\nconst clefs = [\n  {\n    name: \"treble\",\n    possibleOctaves: [\"3\", \"4\", \"5\"]\n  },\n  {\n    name: \"bass\",\n    possibleOctaves: [\"2\", \"3\", \"4\"]\n  }\n]\nexport const possibleNotes = possibleTones.reduce((list, tone) => {\n  clefs.forEach(clef => \n    clef.possibleOctaves.forEach(octave =>\n      list.push({note: tone, octave, clef: clef.name})\n    )\n  )\n  return list\n}, [])","import React, { useEffect, useState } from 'react';\nimport MidiNumbers from '../../react-piano/MidiNumbers';\nimport { useReusableDelay, useStabilizedValue } from '../../utils/hooks';\n\nconst Pitchfinder = require(\"pitchfinder\");\nconst detectPitch = Pitchfinder.AMDF();\n\nconst findPitch = (myAudioBuffer) =>  {\n  const float32Array = myAudioBuffer.getChannelData(0); // get a single channel of sound\n  const pitch = detectPitch(float32Array); // null if pitch cannot be identified\n  const note = noteFromPitch(pitch)\n  const noteName = (note !== undefined && note >= MidiNumbers.MIN_MIDI_NUMBER && note <= MidiNumbers.MAX_MIDI_NUMBER) ? MidiNumbers.getAttributes(note).note : null\n  return noteName\n}\n\nfunction noteFromPitch( frequency ) {\n\tvar noteNum = 12 * (Math.log( frequency / 440 )/Math.log(2) );\n\treturn Math.round( noteNum ) + 69;\n}\n\nconst noteNameFromMidiNumber = (number) => {\n  number = number % 12\n  const notes = [\"C\", \"C#/Db\", \"D\", \"D#/Eb\", \"E\", \"F\", \"F#/Gb\", \"G\", \"G#/Ab\", \"A\", \"A#/Bb\", \"B\"]\n  return notes[number]\n}\n\nconst useAudioInputRaw = () => {\n  const [pitch, setPitch] = useState(null)\n\n  useEffect(() => {\n    navigator.mediaDevices.getUserMedia({ audio: true, video: false })\n    .then((stream) => {\n      const audioContext = new AudioContext();\n      const source = audioContext.createMediaStreamSource(stream);\n      const processor = audioContext.createScriptProcessor(1024, 1, 1);\n  \n      source.connect(processor);\n      processor.connect(audioContext.destination);\n  \n      processor.onaudioprocess = function(event) {\n        // Do something with the data, e.g. convert it to WAV\n        // console.log(e.inputBuffer);\n        setPitch(findPitch(event.inputBuffer))\n      }\n    })\n  }, [])\n\n  return pitch; \n}\n\nexport const useAudioInput = () => {\n  const rawPitch = useAudioInputRaw()\n  const stabilizationPeriod = 50\n  const stabilizedPitch = useStabilizedValue(rawPitch, stabilizationPeriod)\n  return stabilizedPitch\n}","import { noteEquivalents, noteOrder, noteSemitonesAhead } from \"../../chordLogic/notes\"\n\nconst voicingRequestHandlers = {\n  addDoubledNote: (chord, notes, voicingRequest) => [...notes, noteSemitonesAhead(chord.root, voicingRequest.value)]\n}\n\nconst processVoicingRequests = (chord, notes, voicing) => {\n  let revoicedNotes = [...notes]\n  voicing.forEach(voicingRequest => {\n    // console.log(chord, notes, voicing, voicingRequest)\n    console.log(revoicedNotes)\n    revoicedNotes = voicingRequestHandlers[voicingRequest.type](chord, notes, voicingRequest)\n    console.log(revoicedNotes)\n  })\n  return revoicedNotes\n}\n\nexport const chordTypes = [\n  {\n    name: 'Major',\n    canHaveSeventh: true,\n    printName: ({ root, seventh }) => `${root} Major${seventh ? ' 7th' : ''}`,\n    construct: (root, { withSeventh = false } = {}) => {\n      return [\n        root,\n        noteSemitonesAhead(root, 4),\n        noteSemitonesAhead(root, 7),\n        ...(withSeventh ? [noteSemitonesAhead(root, 10)] : [])\n      ]\n    }\n  },\n  {\n    name: 'Minor',\n    canHaveSeventh: true,\n    printName: ({ root, seventh }) => `${root} Minor${seventh ? ' 7th' : ''}`,\n    construct: (root, { withSeventh = false, voicing = [] } = {}) => {\n      const chordNotes = processVoicingRequests({ root, type: 'Minor', seventh: withSeventh }, [\n        root,\n        noteSemitonesAhead(root, 3),\n        noteSemitonesAhead(root, 7),\n        ...(withSeventh ? [noteSemitonesAhead(root, 10)] : [])\n      ], voicing)\n      return chordNotes\n    }\n  },\n  {\n    name: 'Diminished',\n    canHaveSeventh: true,\n    printName: ({ root, seventh }) => `${root} Diminished${seventh ? ' 7th' : ''}`,\n    construct: (root, { withSeventh = false } = {}) => {\n      return [\n        root,\n        noteSemitonesAhead(root, 3),\n        noteSemitonesAhead(root, 6),\n        ...(withSeventh ? [noteSemitonesAhead(root, 10)] : [])\n      ]\n    }\n  },\n  {\n    name: 'Augmented',\n    canHaveSeventh: true,\n    printName: ({ root, seventh }) => `${root} Augmented${seventh ? ' 7th' : ''}`,\n    construct: (root, { withSeventh = false } = {}) => {\n      return [\n        root,\n        noteSemitonesAhead(root, 4),\n        noteSemitonesAhead(root, 8),\n        ...(withSeventh ? [noteSemitonesAhead(root, 10)] : [])\n      ]\n    }\n  },\n  {\n    name: 'Fr+',\n    canHaveSeventh: false,\n    printName: ({ root }, { shortName = false } = {}) => !shortName ? `French Augmented 6th in ${root}` : `Fr+ in ${root}`,\n    construct: (root) => {\n      return [\n        noteSemitonesAhead(root, -4),\n        root,\n        noteSemitonesAhead(root, 2),\n        noteSemitonesAhead(root, 6),\n      ]\n    }\n  },\n  {\n    name: 'Gr+',\n    canHaveSeventh: false,\n    printName: ({ root }, { shortName = false } = {}) => !shortName ? `German Augmented 6th in ${root}` : `Gr+ in ${root}`,\n    construct: (root) => {\n      return [\n        noteSemitonesAhead(root, -4),\n        root,\n        noteSemitonesAhead(root, 3),\n        noteSemitonesAhead(root, 6),\n      ]\n    }\n  },\n  {\n    name: 'Major b5',\n    canHaveSeventh: true,\n    printName: ({ root, seventh }) => `${root} Major b5${seventh ? ' 7th' : ''}`,\n    construct: (root, { withSeventh = false } = {}) => {\n      return [\n        root,\n        noteSemitonesAhead(root, 4),\n        noteSemitonesAhead(root, 6),\n        ...(withSeventh ? [noteSemitonesAhead(root, 10)] : [])\n      ]\n    }\n  },\n  {\n    name: 'Fully Diminished 7th',\n    canHaveSeventh: false,\n    printName: ({ root }) => `${root}º`,\n    construct: (root) => {\n      return [\n        root,\n        noteSemitonesAhead(root, 3),\n        noteSemitonesAhead(root, 6),\n        noteSemitonesAhead(root, 9)\n      ]\n    }\n  },\n]\n\nexport const chordTypesByName = name => chordTypes.find(chordType => chordType.name === name)\nexport const constructChord = ({ root, type, seventh, voicing = [] }) => chordTypesByName(type).construct(root, { withSeventh: seventh, voicing })\nexport const getChordName = (chord, options) => chordTypesByName(chord.type).printName(chord, options)\n\n\nexport const progressions = [\n  { name: \"V → I\", initial: \"Major\", resultantChord: ({ root }) => ({ root: noteSemitonesAhead(root, -7), type: \"Major\", seventh: false }) },\n  { name: \"Gr+ → i6/4\", initial: \"Gr+\", resultantChord: ({ root }) => ({ root, type: \"Minor\", seventh: false, voicing: [{ type: 'addDoubledNote', value: -5 }] }) },\n  { name: \"Fr+ → V\", initial: \"Fr+\", resultantChord: ({ root }) => ({ root: noteSemitonesAhead(root, 7), type: \"Major\", seventh: false }) },\n  { name: \"Vb5 → V7\", initial: \"Major b5\", resultantChord: ({ root }) => ({ root, type: \"Major\", seventh: true }) },\n  { name: \"V+ → I6/4\", initial: \"Augmented\", resultantChord: ({ root }) => ({ root: noteSemitonesAhead(root, -7), type: \"Major\", seventh: false }) },\n  { name: \"ivº → V\", initial: \"Fully Diminished 7th\", resultantChord: ({ root }) => ({ root: noteSemitonesAhead(root, 1), type: \"Major\", seventh: false }) },\n]\n\n\nexport const getEquivalentsToChord = ({ root, type, seventh = false }) => {\n  const alternativeChords = []\n\n  const alternativeRoots = noteOrder\n  const alternativeChordTypes = chordTypes.map(type => type.name)\n\n  alternativeRoots.forEach(alternativeRoot => {\n    alternativeChordTypes.forEach(alternativeType => {\n      const seventhOptions = chordTypesByName(alternativeType).canHaveSeventh ? [true, false] : [false]\n      seventhOptions.forEach(alternativeIsSeventh => {\n        if (alternativeRoot === root && alternativeType === type && (alternativeIsSeventh === seventh || !chordTypesByName(type).canHaveSeventh)) { return }\n\n        const alternativeChord = { root: alternativeRoot, type: alternativeType, seventh: alternativeIsSeventh }\n        if (chordsAreEquivalent({ root, type, seventh }, alternativeChord)) {\n          alternativeChords.push(alternativeChord)\n        }\n      })\n    })\n  })\n\n  return alternativeChords\n}\n\nconst chordsAreEquivalent = (chord1, chord2) => {\n  const chord1Notes = constructChord(chord1)\n  const chord2Notes = constructChord(chord2)\n  return chord1Notes.length === chord2Notes.length && chord1Notes.every(note => chordContainsNote(chord2Notes, note))\n}\n\nconst chordContainsNote = (chordNotes, note) => {\n  return chordNotes.some(chordNote => chordNote === note || noteEquivalents[chordNote] === note)\n}\n\nexport const chordsAreIdentical = (chord1, chord2) => {\n  return ['type', 'root', 'seventh'].every(property => chord1[property] === chord2[property])\n}\n\n\nexport const getProgressionOptions = (chord) => {\n  const equivalents = getEquivalentsToChord(chord)\n  const startingChords = [chord, ...equivalents]\n  const progressionOptions = []\n  startingChords.forEach(startingChord => {\n    progressions.forEach(progression => {\n      if (progression.initial === startingChord.type) {\n        progressionOptions.push({ startingChord, resultantChord: progression.resultantChord(startingChord), name: progression.name })\n      }\n    })\n  })\n  return progressionOptions\n}","/** @jsx jsx */\n/** @jsxFrag React.Fragment */\nimport { jsx, css } from '@emotion/react'\nimport React, { createContext, forwardRef, useContext, useRef, useState } from \"react\"\nimport { noteEquivalents, noteOrder, parseNoteLocations } from '../../chordLogic/notes';\nimport PianoGraphic from \"../PianoGraphic\"\nimport RoundedButton from '../RoundedButton';\nimport { chordsAreIdentical, chordTypes, chordTypesByName, constructChord, getChordName, getEquivalentsToChord, getProgressionOptions } from \"./logic\";\nimport Xarrow from \"react-xarrows\";\nimport { audioContext, useAudioOutput } from '../../sound';\n\nconst possibleRoots = noteOrder.map(note => ({ note, fullName: noteEquivalents[note] !== undefined ? `${note}/${noteEquivalents[note]}` : note }))\nconst possibleChordTypes = chordTypes.map(({ name }) => name)\n\nconst TheoryContext = createContext(null)\n\nexport const TheoryScreen = ({ }) => {\n  const [selectedChord, setSelectedChord] = useState({ root: 'C', type: 'Major', seventh: false })\n  const [arpeggiatePlayback, setArpeggiatePlayback] = useState(false)\n\n  const equivalents = getEquivalentsToChord(selectedChord)\n  const progressionOptions = getProgressionOptions(selectedChord)\n  // console.log(progressionOptions)\n\n  const audio = useAudioOutput()\n\n  const startingChordRef = useRef(null)\n  \n  // console.log(chordNotes)\n  // console.log(getEquivalentsToChord(selectedChord))\n  // equivalents.forEach(equivalent => console.log(chordTypesByName(equivalent.type).construct(equivalent.root)))\n  return (\n    <TheoryContext.Provider value={{ setSelectedChord, arpeggiatePlayback, audio }}>\n      <div css={css`display: flex; flex-direction: column; justify-content: center; align-items: center; width: 100vw%;`}>\n        <div css={css`width: 100%; display: flex;`}>\n          {possibleRoots.map(({ note: root, fullName }) => <RoundedButton key={root} enabled={true} onClick={() => setSelectedChord(chord => ({ ...chord, root }))} active={selectedChord.root === root}>{fullName}</RoundedButton>)}\n        </div>\n        <div css={css`display: flex; align-items: center;`}>\n          {possibleChordTypes.map(type => <RoundedButton key={type} enabled={true} onClick={() => setSelectedChord(chord => ({ ...chord, type }))} active={selectedChord.type === type}>{type}</RoundedButton>)}\n          <div>\n            <input type=\"checkbox\" checked={selectedChord.seventh} onChange={() => setSelectedChord(chord => ({ ...chord, seventh: !chord.seventh }))} /> 7th\n          </div>\n        </div>\n        <div>\n          <input type=\"checkbox\" checked={arpeggiatePlayback} onChange={() => setArpeggiatePlayback(arpeggiate => !arpeggiate)} /> Arpeggiate Playback\n        </div>\n        {/* <div>{JSON.stringify(equivalents)}</div> */}\n        <div css={css`display: flex; gap: 80px;`}>\n          <ChordDisplay chord={selectedChord} ref={startingChordRef} />\n          <ProgressionOptions chord={selectedChord} startingChordRef={startingChordRef} />\n        </div>\n      </div>\n    </TheoryContext.Provider>\n  )\n}\n\nconst getHumanizedNoteTimeOffset = () => Math.random() * 0.04\n\nconst ChordDisplay = forwardRef(({ chord, label = null }, ref) => {\n  const { setSelectedChord, arpeggiatePlayback, audio } = useContext(TheoryContext)\n  const delayBetweenArpeggiatedNotes = 0.3\n  const totalPlaybackDuration = arpeggiatePlayback ? 1.5 : 1\n\n  const chordTitle = chordTypesByName(chord.type).printName(chord)\n  const chordNotes = constructChord(chord)\n  const chordNoteLocations = parseNoteLocations(chordNotes)\n\n  const audioReady = audio !== null\n  const play = () => {\n    if (audioReady) {\n      const notePlays = chordNoteLocations.reduce((notePlays, note, index) => {\n        const delay = arpeggiatePlayback ? (index * delayBetweenArpeggiatedNotes) : getHumanizedNoteTimeOffset()\n        return [...notePlays, ({ time: delay, note, duration: totalPlaybackDuration - delay })]\n      }, [])\n      audio.schedule(audioContext.currentTime, notePlays)\n    }\n  }\n\n  return (\n    <div onMouseEnter={play} onClick={() => setSelectedChord(chord)} css={css`\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      padding: 12px;\n      border-radius: 4px;\n      height: fit-content;\n\n      cursor: pointer;\n      transition: transform 0.5s cubic-bezier(.3,1.85,.7,.83), box-shadow 0.2s, background-color 0.2s;\n      &:hover, &:active {\n        transform: scale(1.03);\n        box-shadow: 0px 0px 3px 1px rgba(255, 255, 255, 0.15);\n        background-color: rgba(255, 255, 255, 0.05);\n      }\n    `}>\n      <div css={css`position: relative; width: 100%; display: flex; justify-content: center;`}>\n        <div css={css`position: absolute; top: 0px; left: 0px; width: 25%; height: 100%; display: flex; justify-content: center; align-items: flex-end;`}>\n          <div css={css`padding-bottom: 6px;`}>{label}</div>\n        </div>\n        <h2>{chordTitle}</h2>\n      </div>\n      <div ref={ref}>\n        <PianoGraphic\n          activeNotes={chordNoteLocations}\n          correctNotes={chordNoteLocations}\n          keysAreCorrect={null}\n          keyPlayPulses={false}\n          highlightedNotes={[]}\n          renderScale={0.5}\n          intervalOfChord={null}\n        />\n      </div>\n    </div>\n  )\n})\n\nconst ProgressionOptions = ({ chord, startingChordRef }) => {\n  const progressionOptions = getProgressionOptions(chord)\n  console.log(progressionOptions)\n\n  return (\n    <div>\n      {progressionOptions.map(progression => <ProgressionDisplay key={`${progression.name}${progression.startingChord.root}`} startingChordRef={startingChordRef} progression={progression} originalChord={chord} />)}\n    </div>\n  )\n}\n\nconst ProgressionDisplay = ({ startingChordRef, progression, originalChord }) => {\n  const { startingChord, resultantChord, name } = progression\n  const resultantChordRef = useRef(null)\n\n  const label = (\n    <div css={css`display: flex; flex-direction: column; align-items: center;`}>\n      {!chordsAreIdentical(originalChord, startingChord) && <div css={css`opacity: 0.7; font-size: 14px;`}>\n        {`as ${getChordName(startingChord, { shortName: true })}`}\n      </div>}\n      <div>\n        {name}\n      </div>\n    </div>\n  )\n\n  return (\n    <>\n      <ChordDisplay chord={resultantChord} ref={resultantChordRef} label={label} />\n      <div>\n        <Xarrow\n          start={startingChordRef}\n          end={resultantChordRef}\n          endAnchor={{ position: \"auto\", offset: { x: -8 } }}\n          startAnchor={{ position: \"auto\", offset: { x: 8 } }}\n        />\n      </div>\n    </>\n  )\n}","import React from 'react';\nimport './App.css';\nimport { Route, Switch, BrowserRouter as Router } from 'react-router-dom';\nimport PracticeScreen from './PracticeScreen';\nimport ProgressScreen from './ProgressScreen';\nimport ReviewScreen from './ReviewScreen';\nimport PracticeIntervalsScreen from './PracticeIntervalsScreen';\nimport { loadProgress } from '../progression/User';\nimport KeyOverviewScreen from './KeyOverviewScreen';\nimport LearningChordsScreen from './LearningChordsScreen';\nimport LearningIntervalsScreen from './LearningIntervalsScreen';\nimport ListeningPracticeScreen from './ListeningPracticeScreen';\nimport ReadingPracticeScreen from './ReadingPracticeScreen/ReadingPracticeScreen';\nimport { ReadingResultsScreen } from './ReadingResultsScreen/ReadingResultsScreen';\nimport { SingingPracticeScreen } from './SingingPracticeScreen/SingingPracticeScreen';\nimport { TheoryScreen } from './TheoryScreen/TheoryScreen';\n\nfunction App() {\n  const progress = {}//loadProgress()\n\n  return (\n    <>\n    <TheoryScreen />\n    {/* <Router>\n      <Switch>\n        <Route exact path=\"/\"                                 children={<ProgressScreen progress={progress}/>} />\n        <Route path=\"/reading/results\"                        children={<ReadingResultsScreen progress={progress}/>} />\n        <Route path=\"/reading\"                                children={<ReadingPracticeScreen progress={progress}/>} />\n        <Route path=\"/singing\"                                children={<SingingPracticeScreen progress={progress}/>} />\n        <Route path=\"/theory\"                                 children={<TheoryScreen progress={progress}/>} />\n        \n        <Route path=\"/listening\"                              children={<ListeningPracticeScreen progress={progress}/>} />\n        <Route path=\"/overview/:keySignatureString\"           children={<KeyOverviewScreen progress={progress}/>} />\n        <Route path=\"/learn/:keySignatureString/intervals\"    children={<LearningIntervalsScreen progress={progress}/>} />\n        <Route path=\"/learn/:keySignatureString\"              children={<LearningChordsScreen progress={progress}/>} />\n        <Route path=\"/practice/:keySignatureString/intervals\" children={<PracticeIntervalsScreen progress={progress}/>} />\n        <Route path=\"/practice/:keySignatureString\"           children={<PracticeScreen progress={progress}/>} />\n        <Route path=\"/review\"                                 children={<ReviewScreen progress={progress}/>} />\n      </Switch>\n    </Router> */}\n    </>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}